package connectfour

import java.lang.NumberFormatException
import kotlin.system.exitProcess

fun main() {
    class playersCl() {
        var name1: String = ""
        var name2: String = ""
    }
    val players = playersCl()

    class poleCl() {
        var rows = 6
        var columns = 7
    }
    val pole = poleCl()
    var end = 0
    class scoreCl(){
        var game = 0
        var numberGame = 1
        var score1 = 0
        var score2 = 0
    }
    val score = scoreCl()

    fun desk(d: MutableList<Array<String>>){
        var deskCl = d
        for (i in 1..pole.columns){
            print(" ")
            print(i)
        }
        println(" ")
        for (i in deskCl) {
            for (j in i) {
                print("║")
                print(j)
            }
            println("║")
        }
        print("╚")
        for (i in 1..pole.columns-1){
            print("═")
            print("╩")
        }
        print("═")
        println("╝")

    }

    fun isInteger(s: String): Boolean {
        return try {
            s.toInt()
            true
        } catch (e: NumberFormatException) {
            false
        }
    }

    fun checkTurn(): Int {
        while (true) {
            var turnS = ""
            var turnI: Int
            turnS = readLine().toString()
            if (turnS.equals("end")) {
                println("Game over!")
                exitProcess(0)
            }
            if (turnS.equals("") || !isInteger(turnS)){
                println("Incorrect column number")
                return 0
            }
            turnI = turnS.toInt()
            if (turnI < 1 || turnI > pole.columns){
                println("The column number is out of range (1 - ${pole.columns})")
                return 0
            }
            else return turnI
        }
    }

    fun name() {
        println("Connect Four")
        print("First player's name: ")
        players.name1 = readLine().toString()
        print("Second player's name: ")
        players.name2 = readLine().toString()
    }

    fun checkRow(board: MutableList<Array<String>>, checkTurn: Int): Int {
        var i = pole.rows-1
        var z = -1
        while (i > -1) {
            if (board[i][checkTurn] == " ") {
                z = i
                break
            }
            i--
        }
        if (z == -1){
            println("Column ${checkTurn + 1} is full")
        }
        return z
    }

    fun checkWin(board: MutableList<Array<String>>) {
        var x = pole.rows - 1
        var y = 0
        var p = " "
        var draw = 0
        fun winDrawText() {
            if (score.game > 1 && score.game >= score.numberGame) {
                println("Score\n" +
                        "${players.name1}: ${score.score1} ${players.name2}: ${score.score2}")
            }
            score.numberGame++
            if (score.game +1 == score.numberGame) {
                println("Game Over!")
                exitProcess(0)
            }
            end = 1
        }
        fun win() {
            if (p.equals("o")) {
                println("Player ${players.name1} won")
                score.score1 += 2
                winDrawText()
            }
            if (p.equals("*")) {
                println("Player ${players.name2} won")
                score.score2 += 2
                winDrawText()
            }
        }
        while (y != pole.columns){
            p = board[x][y]
            if (board[x][y] != " "){
                if (x > 2) {
                    if (board[x][y] == board[x - 1][y] && board[x][y] == board[x - 2][y] && board[x][y] == board[x - 3][y]) {
                        win()
                    }
                }                                        //проверка по вертикали
                if (y < pole.columns - 3){
                    if (board[x][y] == board[x][y + 1] && board[x][y] == board[x][y + 2] && board[x][y] == board[x][y + 3]) {
                        win()
                    }
                }                          //проверка по горизонтали
                if (x > 2 && y > 2) {
                    if (board[x][y] == board[x - 1][y - 1] && board[x][y] == board[x - 2][y - 2] && board[x][y] == board[x - 3][y - 3]) {
                        win()
                    }
                }                               //проверка по диагонали (x-1,y-1)
                if (x > 2 && y < pole.columns - 3) {
                    if (board[x][y] == board[x - 1][y + 1] && board[x][y] == board[x - 2][y + 2] && board[x][y] == board[x - 3][y + 3]) {
                        win()
                    }
                }                //проверка по диагонали (x-1,y+1)
                if (x < pole.rows - 3  && y < pole.columns - 3) {
                    if (board[x][y] == board[x + 1][y + 1] && board[x][y] == board[x + 2][y + 2] && board[x][y] == board[x + 3][y + 3]) {
                        win()
                    }
                }   //проверка по диагонали (x+1,y+1)
                if (x < pole.rows - 3 && y > 2) {
                    if (board[x][y] == board[x + 1][y - 1] && board[x][y] == board[x + 2][y - 2] && board[x][y] == board[x + 3][y - 3]) {
                        win()
                    }
                }                   //проверка по диагонали (x+1,y-1)
            }
            y++
        }
        for (i in board){
            for (j in i){
                if (j.equals(" ")){
                    draw = 1
                    break
                }
            }
        }
        if (draw == 0){
            println("It is a draw")
            score.score1 ++
            score.score2 ++
            winDrawText()
            end = 1
        }
    }

    fun play() {
        var poleVvod = ""
        var player = 0
        fun razmerPole() {
            println(
                "Set the board dimensions (Rows x Columns)\n" + "Press Enter for default (6 x 7)"
            )
            poleVvod = readln()
            poleVvod = poleVvod.replace("\\s".toRegex(), "")
        }
        razmerPole()
        var gameS = ""


        fun multiSingle() {
            println(
                "Do you want to play single or multiple games?\n" +
                        "For a single game, input 1 or press Enter\n" +
                        "Input a number of games:"
            )
            try {
                gameS = readln()
                if (gameS.equals("")) score.game = 1
                else score.game = gameS.toInt()
                if (score.game > 0) {
                    println("${players.name1} VS ${players.name2}\n${pole.rows} X ${pole.columns} board")
                    if (score.game == 1) println("Single game")
                    if (score.game > 1) println("Total ${score.game} games")
                } else {
                    println("Invalid input")
                    multiSingle()
                }
            } catch (e: NumberFormatException) {
                println("Invalid input")
                multiSingle()
            }
        }

        if (poleVvod.equals("")) multiSingle()
        else{
            try {
                val tempPole = poleVvod.split("[xX]".toRegex()).map { it.toInt() }
                pole.rows = tempPole[0]
                pole.columns = tempPole[1]
                if (pole.rows < 5 || pole.rows > 9) {
                    println("Board rows should be from 5 to 9")
                    play()
                }
                if (pole.columns < 5 || pole.columns > 9) {
                    println("Board columns should be from 5 to 9")
                    play()
                } else multiSingle()
            } catch (e: NumberFormatException) {
                println("Invalid input")
                play()
            }
        }
        end@ repeat(score.game) {
            val board = MutableList(pole.rows, { Array(pole.columns, { " " }) })
            if (score.game>1) println("Game #${score.numberGame}")
            var turnAfterCheck: Int
            end = 0
            while (true) {
                desk(board)
                checkWin(board)
                if (end == 1) {
                    return@repeat
                } else {
                    if (player == 0) {
                        while (true) {
                            println("${players.name1}'s turn:")
                            turnAfterCheck = checkTurn()
                            if (turnAfterCheck == 0) continue
                            val check = checkRow(board, turnAfterCheck - 1)
                            if (check != -1) {
                                board[check][turnAfterCheck - 1] = "o"
                                break
                            }
                        }
                        player++
                    } else {
                        while (true) {
                            println("${players.name2}'s turn:")
                            turnAfterCheck = checkTurn()
                            if (turnAfterCheck == 0) continue
                            val check = checkRow(board, turnAfterCheck - 1)
                            if (check != -1) {
                                board[check][turnAfterCheck - 1] = "*"
                                break
                            }
                        }
                        player--
                    }
                }
            }
        }
    }

    name()
    play()
}
